#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BNO055.h>
#include <utility/imumaths.h>
#include <math.h>
#include <Adafruit_PWMServoDriver.h>
#include <PID_v1.h>

Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver();

#define SERVOMIN 500
#define SERVOMAX 2500

int rollServoPin = 0;
int pitchServoPin = 1;
int yawServoPin = 2;

float q0;
float q1;
float q2;
float q3;

int temp = 0;

double rollInput, rollOutput, rollSetpoint;
double pitchInput, pitchOutput, pitchSetpoint;
double yawInput, yawOutput, yawSetpoint;

double Kp = .5, Ki = 55, Kd = .00001;
PID rollPID(&rollInput, &rollOutput, &rollSetpoint, Kp, Ki, Kd, DIRECT);
PID pitchPID(&pitchInput, &pitchOutput, &pitchSetpoint, Kp, Ki, Kd, DIRECT);
PID yawPID(&yawInput, &yawOutput, &yawSetpoint, Kp, Ki, Kd, DIRECT);

#define BNO055_SAMPLERATE_DELAY_MS (100)

Adafruit_BNO055 IMU = Adafruit_BNO055();

void setup() {
  Serial.begin(115200);
  IMU.begin();
  delay(1000);
  temp = IMU.getTemp();
  IMU.setExtCrystalUse(true);

  pwm.begin();
  pwm.setPWMFreq(300);

rollPID.SetMode(AUTOMATIC);
pitchPID.SetMode(AUTOMATIC);
yawPID.SetMode(AUTOMATIC);
  // rollPID.Start(rollInput,
  //               rollOutput,
  //               rollSetpoint);
  // rollPID.Start(pitchInput,
  //               pitchOutput,
  //               pitchSetpoint);
  // rollPID.Start(yawInput,
  //               yawOutput,
  //               yawSetpoint);
}

void loop(){
uint8_t system, gyro, accel, mg = 0;
  IMU.getCalibration(&system, &gyro, &accel, &mg);

  imu::Quaternion quat = IMU.getQuat();

  rollInput = atan2(2 * (quat.w() * quat.x() + quat.y() * quat.z()), 1 - 2 * (quat.x() * quat.x() + quat.y() * quat.y())) /(2*M_PI) * 360;
  pitchInput = asin(2 * quat.w() * quat.y() - quat.x() * quat.z()) /(2*M_PI) * 360;
  yawInput = atan2(2 * (quat.w() * quat.z() + quat.x() * quat.y()), 1 - 2 * (quat.y() * quat.y() + quat.z() * quat.z())) /(2*M_PI) * 360;

  rollPID.SetOutputLimits(0,180);
  pitchPID.SetOutputLimits(0,180);
  yawPID.SetOutputLimits(0,180);

double rollServoWrite=map(rollOutput, 0, 180, SERVOMIN, SERVOMAX);
double pitchServoWrite=map(pitchOutput, 0, 180, SERVOMIN, SERVOMAX);
double yawServoWrite=map(yawOutput, 0, 180, SERVOMIN, SERVOMAX);

rollPID.Compute();
pwm.setPWM(rollServoPin, 0, rollServoWrite);
pitchPID.Compute();
pwm.setPWM(pitchServoPin, 0, pitchServoWrite);
yawPID.Compute();
pwm.setPWM(yawServoPin, 0, yawServoWrite);

  Serial.print(rollSetpoint);
  Serial.print(",");
  Serial.print(rollInput);
  Serial.print(",");
  Serial.print(pitchSetpoint);
  Serial.print(",");
  Serial.print(pitchInput);
  Serial.print(",");
  Serial.print(yawSetpoint);
  Serial.print(",");
  Serial.print(yawInput);
  Serial.print(",");
  Serial.print(accel);
  Serial.print(",");
  Serial.print(gyro);
  Serial.print(",");
  Serial.print(mg);
  Serial.print(",");
  Serial.print(system);
  Serial.print("        ,      Roll CMD");
  Serial.print(rollOutput);
  Serial.print("        ,      Pitch CMD");
  Serial.print(pitchOutput);
  Serial.print("        ,      Yaw CMD");
  Serial.println(yawOutput);

  delay(BNO055_SAMPLERATE_DELAY_MS);

}
